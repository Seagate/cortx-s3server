/*
 * Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions about this software or licensing,
 * please email opensource@seagate.com or cortx-questions@seagate.com.
 *
 */

package com.seagates3.util;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Base64;
import java.util.Random;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.seagates3.authserver.AuthServerConstants;

public class KeyGenUtil {

	private static final Logger LOGGER = LoggerFactory.getLogger(KeyGenUtil.class.getName());
  private
   static final int SALT_LENGTH = 4;
  private static final String S3CIPHER_GENERATE_KEY_CMD = "s3cipher generate_key --const_key ";
    /*
     * TODO
     * UserId and userAccessKeyIds are generated from uuid encoding it to base 64.
     * Replace it with a better approach in the next release.
     */

    /**
     * Generate a new unique Id. The first character of the ID should not be a
     * hyphen or an underscore.
     *
     * @return UserId
     */
    public static String createUserId() {
        String id = BinaryUtil.base64UUID().substring(0, 22);
        if (id.startsWith("-") || id.startsWith("_")) {
            id = getRandomChar() + id.substring(1);
        }

        return id;
    }

    /**
     * Generate a new Access Key Id for the user.
     * key should not contain hyphen or underscore.
     *
     * TODO Since the Access Key Id is generated by encoding uuid to Base 64,
     * the length equals to 22 characters while AWS access key Ids are 20
     * characters. Improve the Access Key generator to generate 20 character
     * long access key id. The access key id can be generated based on
     * geographical location or other parameters.
     *
     * @return AccessKeyId
     */
   public
    static String createUserAccessKeyId(boolean isPermanent) {
        String id = BinaryUtil.base64UUID().substring(0, 22);
        id = id.replace('-', getRandomChar());
        if (isPermanent) {
          id = AuthServerConstants.PERMANENT_KEY_PREFIX.concat(id);
        } else {
          id = AuthServerConstants.TEMPORARY_KEY_PREFIX.concat(id);
        }
        return id;
    }

    /**
     * Generate a secret key for the user.The first character of the ID should
     * not be a hyphen or an underscore.
     *
     * @return SecretKey
     */
    public static String generateSecretKey() {
        byte[] digest = BinaryUtil.hashSHA256(BinaryUtil.getRandomUUIDAsByteArray());

        return BinaryUtil.encodeToBase64String(digest).substring(0, 40);
    }

    /**
     * Generate a new session Id for the temporary user (federated user).
     *
     * @param strToEncode
     * @return SessionId
     */
    public static String createSessionId(String strToEncode) {
        String id = BinaryUtil.base64EncodedHash(strToEncode);
        if (id.startsWith("-") || id.startsWith("_")) {
            id = getRandomChar() + id.substring(1);
        }

        return id;
    }

    /**
     * Return Base 64 encoded UUID.
     *
     * @return Unique ID.
     */
    public static String createId() {
        String id = BinaryUtil.base64UUID().substring(0, 22);
        if (id.startsWith("-") || id.startsWith("_")) {
            id = getRandomChar() + id.substring(1);
        }

        return id;
    }

    /**
     * Generate random character
     * @return random character in the range A..Z
     */
    private static char getRandomChar() {
       char c = (char)(new Random().nextInt(26) + 65);
        return c;
    }

    /**
     * This method generates SHA-1 hash of give string
     * @param String
     * @return
     * @throws NoSuchAlgorithmException
     */
   public
    static String generateSSHA(String text) throws NoSuchAlgorithmException {

      SecureRandom secureRandom = new SecureRandom();
      byte[] salt = new byte[SALT_LENGTH];
      secureRandom.nextBytes(salt);

      MessageDigest crypt = MessageDigest.getInstance("SHA-1");
      crypt.reset();
      crypt.update(text.getBytes());
      crypt.update(salt);
      byte[] hash = crypt.digest();

      byte[] hashPlusSalt = new byte[hash.length + salt.length];
      System.arraycopy(hash, 0, hashPlusSalt, 0, hash.length);
      System.arraycopy(salt, 0, hashPlusSalt, hash.length, salt.length);

      return new StringBuilder()
          .append("{SSHA}")
          .append(Base64.getEncoder().encodeToString(hashPlusSalt))
          .toString();
    }

    /**
     * Geneate a new canonical id for Account.
     * canonical id should be,
     * 1. AlphaNumeric
     * 2. Length should be 64 characters
     * 3. Lower case letters
     * @return canonicalId
     */
   public
    static String createCanonicalId() {
      String uuid1 = BinaryUtil.getAlphaNumericUUID();
      String canonical_id = uuid1 + BinaryUtil.getAlphaNumericUUID();
      return canonical_id.toLowerCase();
    }

    /**
     * Generate a new user id for IAM user.
     * user id should be,
     * 1. Alphanumeric
     * 2. Length should be 21 i.e USER_ID_PREFIX + userId
     * 3. Upper case letters
     * e.g AIDA5KZQJXPTROAIAKCKO
     * where User_ID_Prefix i.e. "AIDA" is used to represent IAM user id
     * @return UserId
     */
   public
    static String createIamUserId() {
      String id = BinaryUtil.getAlphaNumericUUID().substring(0, 17);
      // PREFIX "AIDA" will be added to this userId in Controller class
      return id.toUpperCase();
    }

    /**
     * Generate a new account id.
     * account id should be,
     * 1. Contains digits only
     * 2. Length should be 12
     * e.g 234755435308
     * @return AccountId
     */
   public
    static String createAccountId() {
      long max = 999999999999L;
      long min = 100000000000L;
      long account_id = min + (long)(Math.random() * ((max - min) + 1));
      return String.valueOf(account_id);
    }
   
	public static String generateKeyByS3CipherUtil(String constKey) throws IOException {
		String generatedKey = null;
		String generateKeyCmd = S3CIPHER_GENERATE_KEY_CMD + constKey;
		BufferedReader reader = null;
		try {
			Process s3Cipher = Runtime.getRuntime().exec(generateKeyCmd);
			int exitVal = s3Cipher.waitFor();
			if (exitVal != 0) {
				throw new IOException("S3 cipher util exited with error.");
			}
			reader = new BufferedReader(new InputStreamReader(s3Cipher.getInputStream()));
			String line = reader.readLine();
			if (line == null || line.isEmpty()) {
				throw new IOException("S3 cipher returned empty stream while fetching openldap cipher key.");
			}
			generatedKey = line;
		} catch (IOException | InterruptedException e) {
			LOGGER.error("Error occurred while generating key using s3cipher util. Cause: " + e.getCause()
					+ ". Message: " + e.getMessage());
			LOGGER.debug("Stacktrace: " + e);
			throw new IOException("S3 cipher util exited with error.");
		} finally {
			if (reader != null)
				try {
					reader.close();
				} catch (IOException e) {
					LOGGER.error(
							"Error closing buffered reader. Cause: " + e.getCause() + ". Message: " + e.getMessage());
					LOGGER.debug("Stacktrace: " + e);
				}
		}

		return generatedKey;
	}
}
