#!/bin/sh
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#

# This script helps to generate coverage report (.xml) for cpp code.

set -e

#variables
SCRIPT_PATH=$(readlink -f "$0")
SCRIPT_DIR=$(dirname "$SCRIPT_PATH")
SRC_DIR="$(dirname "$(dirname "$SCRIPT_DIR" )")"
BUILD_FILE="./BUILD.template"
# lcov directory to dump all the coverage data files generated by gcov tool
LCOV_DIR="$SRC_DIR/.lcovlog"

DES_DIR=${DES_DIR:-"$SRC_DIR/.code_coverage"}

die() {
	echo "${*}"
	exit 1
}

# Remove stale coverage reports and data files
cleanup() {
	echo "Cleaning up old coverage reports."
	local file="$DES_DIR/s3server_cpp_coverage.info"

	if [ -f "$file" ]; then
		rm -f $file
	fi

	# Clean up the lcov directory
	if [ -d "$LCOV_DIR" ]; then
		rm -rf $LCOV_DIR
	fi
}

# Install any dependency rpms/packages if not present
check_prerequisite() {
	# install lcov rpm if not present
	rpm -q lcov &> /dev/null || yum install lcov -y
}

# Configure path to lcov directory for dumping all coverage data files generated
config_lcov() {
	mkdir -p $LCOV_DIR
	export GCOV_PREFIX=$LCOV_DIR
	export GCOV_PREFIX_STRIP=2
}

# Add coverage flags to compiler and linker options in BUILD file
add_coverage_options() {
	# Accommodate code coverage options to compiler and linker options.
	echo "Updating BUILD.template file"

	sed -i '/linkopts = \[/ s/$/ "--coverage", "-lgcov", /' $BUILD_FILE
	sed -i '/copts = \[/s/copts = \[/copts = \["-fprofile-arcs", "-ftest-coverage", /' $BUILD_FILE
}

run_ut() {
	echo "Executing UTs"
	pushd $SRC_DIR
	# Update the BUILD.template file
	add_coverage_options
	# Run UTs
	set +e
	./jenkins-build.sh
	set -e
	# Restoring back to old state
	git checkout -- $BUILD_FILE
	popd
}

# Generates coverage report based on data files generated by gcov tool
run_coverage() {
	src_lcov="$SRC_DIR/bazel-out/k8-fastbuild/bin/_objs"
	dest_lcov="$GCOV_PREFIX/cwd/bazel-out/k8-fastbuild/bin/_objs/"

	# Checking coverage data files generated.
	test -d $dest_lcov || die "Failed to generate coverage data files.";

	# Copy corresponding .gcno files created during jenkins-build to their
	# corresponding .gcda data files
	set +e
	pushd $src_lcov
	find . -name '*.gcno' | cpio -p $dest_lcov &> /dev/null
	popd
	set -e

	pushd $GCOV_PREFIX;
	# Remove unwanted data files
	find . -name murmur* -exec rm -f {} \;
	find . -name jsoncpp* -exec rm -f {} \;
	find . -name base64* -exec rm -f {} \;

	# Generate coverage report using lcov tool
	lcov -t "s3server coverage result" --no-external -b $SRC_DIR -o s3server_coverage.info -c -d .
	popd
}

# Validate the coverage report generated and clean up the external trace files
check_report() {
	pushd $GCOV_PREFIX
	test -f s3server_coverage.info || die "Failed to generate the Coverage report.";

	# Remove external trace files
	lcov --remove s3server_coverage.info '*/third_party/*' -o s3server_coverage_final.info
	popd
}

############################# Main ################################

cleanup
check_prerequisite
config_lcov
run_ut
run_coverage
check_report

# Copy file to destination directory
cp $GCOV_PREFIX/s3server_coverage_final.info $DES_DIR/s3server_cpp_coverage.info

echo "Cpp Code Coverage Report generated successfully!!"
