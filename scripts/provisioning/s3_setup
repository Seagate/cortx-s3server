#!/bin/bash -e
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#

#######################################################
# Configure and initialize s3server and dependencies
#######################################################
USAGE="USAGE: bash $(basename "$0") [post_install]
                    [config]
                    [init]
                    [test]
                    [cleanup]
                    --config <confstore-config-file-url-path>

where:
post_install             will do postinstall steps, which will include validation of
                         pre-requisite packages and services, like motr

config                   do configuration of openldap (with replication), haproxy and
                         create authjks keys.

init                     create 's3backgrounddelete' s3 account.

test                     run s3 sanity tests

cleanup                  cleanup S3 account created for backgrounddelete service

reset                    delete all logs, metadata etc. (which was populated as a result of the test phase)

prepare                  prepare

--config                 URL path for the confstore configuration file. This option is Mandatory

--help                   Display this help and exit"

set -e

install_dir='/opt/seagate/cortx/s3/bin'

confstore_config_url=""
s3postinstall=false
s3config=false
s3init=false
s3cleanup=false
s3reset=false
s3prepare=false
s3test=false

while test $# -gt 0
do
  case "$1" in
    post_install )
        s3postinstall=true
        ;;
    config )
        s3config=true
        ;;
    init )
        s3init=true
        ;;
    test )
        s3test=true
        ;;
    cleanup )
        s3cleanup=true
        ;;
    reset )
        s3reset=true
        ;;
    prepare )
        s3prepare=true
        ;;
    --config ) shift;
        confstore_config_url=$1
        ;;
    --help | -h )
        echo "$USAGE"
        exit 0
        ;;
    None )
        exit 0
        ;;
  esac
  shift
done

# TODO: test for existence of the confstore config file, to be taken in python equivalent of s3_setup
if [ -z "$confstore_config_url" ]
then
    echo "ERROR: --config option is mandatory and value should be a valid URL path, exiting."
    exit 1
fi

create_auth_jks_password()
{
    sh /opt/seagate/cortx/auth/scripts/create_auth_jks_password.sh
    if [ $? -ne 0 ]
    then
        echo "ERROR: Failed to set JKS password."
        echo "ERROR: Please re-run 's3_setup config' again."
        echo "ERROR: Run 's3_setup cleanup', followed by 's3_setup config', if issue persists."
        exit 1
    fi
}

add_s3backgrounddelete_rabbitmq_user()
{
    users=$(rabbitmqctl list_users)
    if [[ $users =~ "cortx-s3" ]]
    then
    echo "WARN: Rabbitmq s3user already exists. Cleaning existing s3user."
    rabbitmqctl delete_user cortx-s3
    fi
    # Create a user (In this case user is 'cortx-s3' with password as 'password')
    rabbitmqctl add_user cortx-s3 password
    # Setup this user as an administrator.
    rabbitmqctl set_user_tags cortx-s3 administrator
    rabbitmqctl set_permissions -p / cortx-s3 ".*" ".*" ".*"
    # Setup queue mirroring
    rabbitmqctl set_policy ha-all ".*" '{"ha-mode":"all"}'

    echo "INFO: Rabbitmq configuration for this node is completed."
}

if [ $s3postinstall == true ]
then
    echo "INFO: Start haproxy, slapd, rabbitmq-server and rsyslog services.."
    sh /opt/seagate/cortx/s3/bin/s3prov_start_services.sh haproxy slapd rabbitmq-server rsyslog
    if [ $? -eq 0 ]
    then
      echo "Services are running successfully."
    else
      echo "Failed to start services."
      exit 1
    fi

    echo "INFO: running post_install..."
    # we already have 'exit' statement in '_s3_setup' binary at failure scenario,
    # no need to add 'exit' here.   
    $install_dir/_s3_setup post_install
    echo "INFO: All pre-requisites are in place."
fi

if [ $s3config == true ]
then
    # validate pre-requisites before proceeding
    # we already have 'exit' statement in '_s3_setup' binary at failure scenario,
    # no need to add 'exit' here.

    # NOTE: Call to create_auth_jks_password will be removed later
    # Create random password for auth jks keystore
    echo "INFO: Creating random jks password for Auth server.."
    create_auth_jks_password

    echo "INFO: running config..."
    $install_dir/_s3_setup config --config "$confstore_config_url"

    if [ $? -ne 0 ]
    then
        echo "ERROR: config failed, exiting"
        exit 1
    fi
fi

if [ $s3init == true ]
then
    echo "INFO: Setting up rabbitmq server for S3backgroundelete.."
    add_s3backgrounddelete_rabbitmq_user

    echo "INFO: create s3background delete account.."
    $install_dir/_s3_setup init --config "$confstore_config_url"
fi

if [ $s3test == true ]
then
    # we already have 'exit' statement in '_s3_setup' binary at failure scenario,
    # no need to add 'exit' here.
    # Test success is determined by provisioner using _s3_setup's return stdout "PASS: S3-Sanity test passed."

    echo "INFO: Starting S3-Sanity.."
    $install_dir/_s3_setup test --config "$confstore_config_url"
fi

if [ $s3cleanup == true ]
then
    $install_dir/_s3_setup cleanup --config "$confstore_config_url"
fi

if [ $s3reset == true ]
then
    $install_dir/_s3_setup reset --config "$confstore_config_url"
fi

if [ $s3prepare == true ]
then
    $install_dir/_s3_setup prepare --config "$confstore_config_url"
fi

