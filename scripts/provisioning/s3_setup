#!/bin/bash -e
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#

#######################################################
# Configure and initialize s3server and dependencies
#######################################################
USAGE="USAGE: bash $(basename "$0") [post_install]
                    [config]
                    [init]
                    [test]
                    [cleanup]
                    --config <confstore-config-file-url-path>

where:
post_install             will do postinstall steps, which will include validation of
                         pre-requisite packages and services, like motr

config                   do configuration of openldap (with replication), haproxy and
                         create authjks keys.

init                     create 's3backgrounddelete' s3 account.

test                     run s3 sanity tests

cleanup                  cleanup S3 account created for backgrounddelete service

--config                 URL path for the confstore configuration file. This option is Mandatory

--help                   Display this help and exit"

set -e

access_key=""
secret_key=""

confstore_config_url=""
s3postinstall=false
s3config=false
s3init=false
s3cleanup=false
s3test=false

cipherkey=""
sgiamadminpassd=""
rootadminpasswd=""

ldappasswd=""
rootpasswd=""

encrypt_cli="/opt/seagate/cortx/auth/AuthPassEncryptCLI-1.0-0.jar"

# check if s3cipher, s3confstore and s3setup are installed on the system
if ! command -v s3cipher &>/dev/null
then
    echo "ERROR: s3cipher not installed on the system, exiting."
    exit 1
fi

if ! command -v s3confstore &>/dev/null
then
    echo "ERROR: s3confstore not installed on the system, exiting."
    exit 1
fi

if ! command -v s3setup &>/dev/null
then
    echo "ERROR: s3setup not installed on the system, exiting."
    exit 1
fi


while test $# -gt 0
do
  case "$1" in
    post_install )
        s3postinstall=true
        ;;
    config )
        s3config=true
        ;;
    init )
        s3init=true
        ;;
    test )
        s3test=true
        ;;
    cleanup )
        s3cleanup=true
        ;;
    --config ) shift;
        confstore_config_url=$1
        ;;
    --help | -h )
        echo "$USAGE"
        exit 0
        ;;
    None )
        exit 0
        ;;
  esac
  shift
done

# TODO: test for existence of the confstore config file, to be taken in python equivalent of s3_setup
if [ -z "$confstore_config_url" ]
then
    echo "ERROR: --config option is mandatory and value should be a valid URL path, exiting."
    exit 1
fi


get_ldap_password()
{
    cipherkey=$(s3cipher generate_key --const_key openldap)
    if [ ! -z "$cipherkey" ]
    then
        sgiamadminpassd=$(s3confstore "$confstore_config_url" getkey --key "openldap>sgiam>secret")
        rootadminpasswd=$(s3confstore "$confstore_config_url" getkey --key "openldap>root>secret")
        if [ ! -z "$sgiamadminpassd" ] && [ ! -z "$rootadminpasswd" ]
        then
            # decrypt the password read from the confstore
            ldappasswd=$(s3cipher decrypt --data "$sgiamadminpassd" --key "$cipherkey")
            rootdnpasswd=$(s3cipher decrypt --data "$rootadminpasswd" --key "$cipherkey")
            if [ -z "$ldappasswd" ] || [ -z "$rootdnpasswd" ]
            then
                echo "ERROR: failed to decrypt sgiamadmin or root user's ldap password, exiting."
                exit 1
            fi
        else
            echo "ERROR: failed to read sgiamadmin or root user's ldap password from confstore, exiting."
            exit 1
        fi
    else
        echo "ERROR: failed to generate cipher key, exiting."
        exit 1
    fi
}

# Fetch and update cluster_id
fetch_update_cluster_id()
{
    cluster_id=$(s3confstore "$confstore_config_url" getkey --key "cluster>cluster_id")
    if [ $? -eq 0 ]
    then
        # TODO: remove below sed cmd, as soon as s3backgrounddelete gets updated to read configurations from confstore
        sed -i "s/cluster_id:.*$/cluster_id: "$cluster_id"/g" /opt/seagate/cortx/s3/s3backgrounddelete/s3_cluster.yaml
    else
        echo "ERROR: failed to read cluster>cluster_id from py-utils:confstore, exiting."
        exit 1
    fi
}

create_auth_jks_password()
{
    sh /opt/seagate/cortx/auth/scripts/create_auth_jks_password.sh
    if [ $? -ne 0 ]
    then
        echo "ERROR: Failed to set JKS password."
        echo "ERROR: Please re-run 's3_setup config' again."
        echo "ERROR: Run 's3_setup cleanup', followed by 's3_setup config', if issue persists."
        exit 1
    fi
}

# Install and Configure Openldap over Non-SSL.
configure_openldap()
{
    /opt/seagate/cortx/s3/install/ldap/setup_ldap.sh --confurl "$confstore_config_url" --defaultpasswd --skipssl
    if [ $? -ne 0 ]
    then
        echo "ERROR: Failed to configure openldap."
        echo "ERROR: Run 's3_setup cleanup', followed by 's3_setup config', to configure again."
        exit 1
    fi

    # Enable slapd logging in rsyslog config
    if [[ -f /opt/seagate/cortx/s3/install/ldap/rsyslog.d/slapdlog.conf ]]
    then
        mkdir -p /etc/rsyslog.d
        cp /opt/seagate/cortx/s3/install/ldap/rsyslog.d/slapdlog.conf /etc/rsyslog.d/slapdlog.conf
    fi

    systemctl restart rsyslog

    # Set openldap-replication
    # check number of nodes in the cluster
    server_nodes_count=$(s3confstore "$confstore_config_url" getnodecount)
    if [ "$server_nodes_count" -gt 1 ]
    then
        hosts_str=$(s3confstore "$confstore_config_url" getnodenames)
        echo "INFO: hostnames str: [$hosts_str]"
        read -ra hosts_arr <<< "$hosts_str"
        for host in "${hosts_arr[@]}"
        do
            echo "$host" >> hosts_list_file.txt
        done
        echo "setting ldap-replication on all cluster nodes.."
        /opt/seagate/cortx/s3/install/ldap/replication/setupReplicationScript.sh -h hosts_list_file.txt -p "$rootdnpasswd"
        if [ $? -ne 0 ]
        then
            echo "ERROR: Failed to configure ldap replication, exiting."
            echo "ERROR: Run 's3_setup cleanup', followed by 's3_setup config' again, after resolving the issue."
            exit 1
        fi
        rm -f hosts_list_file.txt
    else
        echo "INFO: Not setting ldap-replication as the cluster node_count is less than 2."
    fi
    echo "INFO: Successfully configured openldap on the node."
}

add_s3backgrounddelete_rabbitmq_user()
{
    users=$(rabbitmqctl list_users)
    if [[ $users =~ "cortx-s3" ]]
    then
    echo "WARN: Rabbitmq s3user already exists. Cleaning existing s3user."
    rabbitmqctl delete_user cortx-s3
    fi
    # Create a user (In this case user is 'cortx-s3' with password as 'password')
    rabbitmqctl add_user cortx-s3 password
    # Setup this user as an administrator.
    rabbitmqctl set_user_tags cortx-s3 administrator
    rabbitmqctl set_permissions -p / cortx-s3 ".*" ".*" ".*"
    # Setup queue mirroring
    rabbitmqctl set_policy ha-all ".*" '{"ha-mode":"all"}'

    echo "INFO: Rabbitmq configuration for this node is completed."
}

# Generate s3backgroundelete keys using cipher
create_s3backgroundelete_keys()
{
    access_key=$(s3cipher generate_key --use_base64 --key_len  22  --const_key  "s3backgroundaccesskey")
    secret_key=$(s3cipher generate_key --key_len  40  --const_key  "s3backgroundsecretkey")
}

# Create s3 account for s3 backgrounddelete
create_background_delete_account()
{
    output=$(ldapsearch -b "o=s3-background-delete-svc,ou=accounts,dc=s3,dc=seagate,dc=com" -x -w $ldappasswd -D "cn=sgiamadmin,dc=seagate,dc=com" -H ldap://) || echo ""
    if [[ $output == *"No such object"* ]]
    then
      echo "INFO: Setting up rabbitmq server for S3backgroundelete.."
      add_s3backgrounddelete_rabbitmq_user

      # Create s3background delete account
      create_s3backgroundelete_keys
      # TODO - use s3confstore to set the access_key and secret_key in confstore.
      # once the s3backgrounddelete is updated to read the keys from confstore, instead of config.yaml file
      sed -i "s/background_account_access_key:.*$/background_account_access_key: \"$access_key\"/g" /opt/seagate/cortx/s3/s3backgrounddelete/config.yaml
      sed -i "s/background_account_secret_key:.*$/background_account_secret_key: \"$secret_key\"/g" /opt/seagate/cortx/s3/s3backgrounddelete/config.yaml
      sed -i "s/ak:.*/ak: $access_key/g" /opt/seagate/cortx/s3/install/ldap/background_delete_account.ldif
      sed -i "s/sk:.*/sk: $secret_key/g" /opt/seagate/cortx/s3/install/ldap/background_delete_account.ldif
      sed -i "s/ak=.*/ak=$access_key,ou=accesskeys,dc=s3,dc=seagate,dc=com/g" /opt/seagate/cortx/s3/install/ldap/background_delete_account.ldif
      access_key=""
      secret_key=""
      sh /opt/seagate/cortx/s3/install/ldap/create_background_delete_account.sh $ldappasswd
      if [ $? -eq 0 ]
      then
        echo "Created s3backgrounddelete account successfully."
      else
        echo "Failed to add s3backgrounddelete account, please check openldap logs to take corrective action."
        exit 1
      fi
    else
      echo "INFO: s3backgrounddelete account already exists"
    fi
}

if [ $s3postinstall == true ]
then
    echo "INFO: Start haproxy, slapd, rabbitmq-server and rsyslog services.."
    systemctl restart haproxy slapd rabbitmq-server rsyslog

    echo "INFO: running post_install..."
    # we already have 'exit' statement in 's3setup' binary at failure scenario,
    # no need to add 'exit' here.   
    s3setup post_install
    echo "INFO: All pre-requisites are in place."
fi

if [ $s3config == true ]
then
    # validate pre-requisites before proceeding
    # we already have 'exit' statement in 's3setup' binary at failure scenario,
    # no need to add 'exit' here.
    echo "INFO: validating pre-requisites for provisioning s3server.."
    s3setup post_install

    # Fetch and update cluster id
    # To decrypt openldap passwords, we need 'cluster_id' updated in s3_cluster.yaml
    echo "INFO: Fetching and updating cluster id in s3_cluster.yaml .."
    fetch_update_cluster_id

    # get openldap password from confstore
    echo "INFO: Get openldap passwords from confstore.."
    get_ldap_password

    # Create random password for auth jks keystore
    echo "INFO: Creating random jks password for Auth server.."
    create_auth_jks_password

    # configure openldap and ldap-replication
    echo "INFO: Configure openldap.."
    configure_openldap

    echo "INFO: Configure haproxy.."
	s3haproxyconfig --path "$confstore_config_url"
    if [ $? -ne 0 ]
    then
        echo "ERROR: haproxy configuration failed, exiting"
        exit 1
    fi
fi

if [ $s3init == true ]
then
    # validate pre-requisites before proceeding
    # we already have 'exit' statement in 's3setup' binary at failure scenario,
    # no need to add 'exit' here.
    echo "INFO: validating pre-requisites for provisioning s3server.."
    s3setup post_install

    # get openldap password from confstore
    echo "INFO: Get openldap passwords from confstore.."
    get_ldap_password

    # Setup s3 background delete and its dependencies
    echo "INFO: Creating the s3backgrounddelete account.."
    create_background_delete_account
fi

if [ $s3test == true ]
then
    # get openldap password from confstore
    echo "INFO: Get openldap passwords from confstore.."
    get_ldap_password

    cmd_out=$(ldapsearch -b "o=s3-background-delete-svc,ou=accounts,dc=s3,dc=seagate,dc=com" -x -w $ldappasswd -D "cn=sgiamadmin,dc=seagate,dc=com" -H ldap://) || echo ""
    if [[ $cmd_out == *"No such object"* ]];then
        echo "ERROR: failed to find s3background delete account, sanity test failed, exiting."
        exit 1
    else
        echo "PASS: S3-Sanity test passed."
    fi
fi

if [ $s3cleanup == true ]
then
    # get openldap password from confstore
    echo "INFO: Get openldap passwords from confstore.."
    get_ldap_password

    s3setup cleanup --ldappasswd "$ldappasswd"
fi
