#!/usr/bin/env python3
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#

import sys
import errno
import argparse
import traceback
import errno
import logging
import os
import socket
from logging import handlers

#Logger details
s3deployment_logger_name = "s3-deployment-logger-" + "[" + str(socket.gethostname()) + "]"
s3deployment_log_file = "/var/log/seagate/s3/s3deployment/s3deployment.log"
s3deployment_log_directory = "/var/log/seagate/s3/s3deployment/"
s3deployment_log_format = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"

def main():

  parser = argparse.ArgumentParser("S3server setup command")
  subparsers = parser.add_subparsers(dest = 'command')

  postinstallCmd = subparsers.add_parser('post_install', help='setup post_install')
  postinstallCmd.add_argument("--config", help='config URL', type=str)

  configCmd = subparsers.add_parser('config', help='setup config')
  configCmd.add_argument("--config", help='config URL', type=str, required=True)
  configCmd.add_argument("--only_ldap", help='Configure only openldap', action='store_true')
  configCmd.add_argument("--only_haproxy", help='Configure only haproxy', action='store_true')

  initCmd = subparsers.add_parser('init', help='setup init')
  initCmd.add_argument("--config", help='config URL', type=str, required=True)

  cleanupCmd = subparsers.add_parser('cleanup', help='setup cleanup')
  cleanupCmd.add_argument("--config", help='config URL', type=str, required=True)
  cleanupCmd.add_argument("--pre_factory", help='Revert to factory state', action='store_true')

  testCmd = subparsers.add_parser('test', help='setup test')
  testCmd.add_argument("--config", help='config URL', type=str, required=True)
  testCmd.add_argument("--plan", help='test plan', type=str, required=False)

  resetCmd = subparsers.add_parser('reset', help='setup reset')
  resetCmd.add_argument("--config", help='config URL', type=str, required=True)

  prepareCmd = subparsers.add_parser('prepare', help='setup prepare')
  prepareCmd.add_argument("--config", help='config URL', type=str, required=True)

  preupgradeCmd = subparsers.add_parser('preupgrade', help='setup pre upgrade')

  postupgradeCmd = subparsers.add_parser('postupgrade', help='setup post upgrade')

  args = parser.parse_args()

  create_logger_directory()
  logger = create_logger()

  try:
    if args.command == 'post_install':
      from postinstallcmd import PostInstallCmd
      logger.info('post_install started.')
      PostInstallCmd(args.config).process()
      logger.info('post_install successful.')
    elif args.command == 'cleanup':
      from cleanupcmd import CleanupCmd
      logger.info('cleanup started.')
      CleanupCmd(None).process(args.pre_factory)
      logger.info('cleanup successful.')
    elif args.command == 'config':
      from configcmd import ConfigCmd
      logger.info('config started.')
      configure_only_haproxy = False
      configure_only_openldap = False
      if args.only_ldap == True:
        configure_only_openldap = True
      elif args.only_haproxy == True:
        configure_only_haproxy = True
      ConfigCmd(args.config).process(configure_only_openldap,
                                configure_only_haproxy)
      logger.info('config successful.')
    elif args.command == 'init':
      from initcmd import InitCmd
      logger.info('init started.')
      InitCmd(args.config).process()
      logger.info('init successful.') 
    elif args.command == 'test':
      from testcmd import TestCmd
      logger.info('test started.')
      test_plan = None
      if args.plan:
        test_plan = args.plan
      TestCmd(args.config, test_plan).process()
      logger.info('PASS: S3-Sanity test passed.')
    elif args.command == 'reset':
      from resetcmd import ResetCmd
      logger.info('reset started.')
      ResetCmd(None).process()
      logger.info('reset successful.')
    elif args.command == 'prepare':
      from preparecmd import PrepareCmd
      logger.info('prepare started.')
      PrepareCmd(args.config).process()
      logger.info('prepare successful.')
    elif args.command == 'preupgrade':
      from preupgradecmd import PreUpgradeCmd
      logger.info('pre-upgrade started.')
      PreUpgradeCmd(None).process()
      logger.info('pre-upgrade successful.')
    elif args.command == 'postupgrade':
      from postupgradecmd import PostUpgradeCmd
      logger.info('post-upgrade started.')
      PostUpgradeCmd(None).process()
      logger.info('post-upgrade successful.')

  except Exception as e:
    logger.error(f"{str(e)}")
    logger.error(f"{traceback.format_exc()}")
    return errno.EINVAL

  return 0

def create_logger():
    """Create logger, file handler, console handler and formatter."""
    # create logger with "S3 deployment logger"
    logger = logging.getLogger(s3deployment_logger_name)
    logger.setLevel(logging.DEBUG)
    #with maxBytes to 5242880, will allow base file s3deployment.log to rotate after every 5MB.
    #with a backupCount of 5, will get s3deployment.log, s3deployment.log.1, s3deployment.log.2, up to s3deployment.log.5.
    #The file being written to is always s3deployment.log.
    fhandler = logging.handlers.RotatingFileHandler(s3deployment_log_file, mode='a',
                                                    maxBytes = 5242880,
                                                    backupCount = 5, encoding=None,
                                                    delay=False )
    fhandler.setLevel(logging.DEBUG)

    # create console handler with a higher log level
    chandler = logging.StreamHandler(sys.stdout)
    chandler.setLevel(logging.DEBUG)

    formatter = logging.Formatter(s3deployment_log_format)

    # create formatter and add it to the handlers
    fhandler.setFormatter(formatter)
    chandler.setFormatter(formatter)

    # add the handlers to the logger
    logger.addHandler(fhandler)
    logger.addHandler(chandler)

    return logger

def create_logger_directory():
    """Create log directory if not exsists."""
    _logger_directory = os.path.join(s3deployment_log_directory)
    if not os.path.isdir(_logger_directory):
        try:
            os.mkdir(_logger_directory)
        except OSError as e:
            if e.errno == errno.EEXIST:
                pass
            else:
                raise Exception("Deployment Logger Could not be created")


if __name__ == '__main__':
  sys.exit(main())
