#!/usr/bin/env python3
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#

# TODO: change name of this python script to 's3_setup' when shell script of the same name is EOL'ed

import sys
import argparse
import traceback
import errno

from postinstallcmd import PostInstallCmd

def main():
  parser = argparse.ArgumentParser("S3server setup command")
  subparsers = parser.add_subparsers(dest = 'command')

  postinstallCmd = subparsers.add_parser('post_install', help='setup post_install')
  postinstallCmd.add_argument("--config", help='config URL', type=str)

  configCmd = subparsers.add_parser('config', help='setup config')
  configCmd.add_argument("--config", help='config URL', type=str, required=True)

  initCmd = subparsers.add_parser('init', help='setup init')
  initCmd.add_argument("--config", help='config URL', type=str, required=True)

  cleanupCmd = subparsers.add_parser('cleanup', help='setup cleanup')
  cleanupCmd.add_argument("--config", help='config URL', type=str, required=True)

  testCmd = subparsers.add_parser('test', help='setup test')
  testCmd.add_argument("--config", help='config URL', type=str, required=True)

  testCmd = subparsers.add_parser('reset', help='setup reset')
  testCmd.add_argument("--config", help='config URL', type=str, required=True)

  args = parser.parse_args()
  try:
    # run post_install always, the failure will raise exception in PostInstallCmd class
    PostInstallCmd().process()
    sys.stdout.write('INFO: post_install validations successful.\n')
    
    if args.command == 'cleanup':
      from cleanupcmd import CleanupCmd
      CleanupCmd(args.config).process()
      sys.stdout.write('INFO: cleanup successful.\n')
      
    elif args.command == 'config':
      from configcmd import ConfigCmd
      ConfigCmd(args.config).process()
      sys.stdout.write('INFO: config successful.\n')
      
    elif args.command == 'init':
      from initcmd import InitCmd
      InitCmd(args.config).process()
      sys.stdout.write('INFO: init successful.\n')
      
    elif args.command == 'test':
      from testcmd import TestCmd
      TestCmd(args.config).process()
      sys.stdout.write('PASS: S3-Sanity test passed.\n')
      
    elif args.command == 'reset':
      from resetcmd import ResetCmd
      ResetCmd(args.config).process()
      sys.stdout.write('INFO: reset successful.\n')

  except Exception as e:
    sys.stderr.write(f"\n{str(e)}\n\n")
    sys.stderr.write(f"{traceback.format_exc()}\n")
    return errno.EINVAL

  return 0

if __name__ == '__main__':
  sys.exit(main())
