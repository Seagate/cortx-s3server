#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#


# Hooks:
#   - there a set of main hooks which reflects provisioning stages
#     (e.g. prepare, config, upgrade ...)
#   - 'pre'/'post' hooks provide an ability for more granular subscription
#     logic over the main hooks:
#     - by default - not expected and not called
#     - if defined - spec format is the same
#
# Flows:
#  - a hook can be called in scope of different Cortx flows
#  - supported flows:
#    - deploy: deployment flow
#    - upgrade: online (rolling) upgrade flow
#    - upgrade-offline: offline upgrade flow
#
# Levels:
#  - a hook can be called on different levels
#  - supported levels:
#    - cluster: these hooks are called only once per a cluster (TBD which node)
#    - node: these hooks are called once per a node
#
# Constraints:
#   - a hook can be subsribed / unsubscribed using spec constraints
#   - a constraint is specified using `when` key and Jinja2 expression
#     over predefined context variables as a value
#   - An expression should result into a boolean
#   - if the constraint is not specified then default constraint is applied:
#     - level: node
#     - flow: not defined but set of hooks itself depends on the flow
#
# Context variables:
#   - level: cluster | node
#   - flow: deploy | upgrade | upgrade-offline
# 
# Environment variables for hook commands:
#   - can be used to build conditional logic internally in a component command
#   - list of variables:
#     - PRVSNR_MINI_HOOK - the hook name (e.g. 'prepare', 'post-config', 'pre-test'')
#     - PRVSNR_MINI_FLOW - active flow
#     - PRVSNR_MINI_LEVEL - active level
#
# CLI arguments for hook commands (not for PI-2, under discussion):
#   --level
#   --flow
#
# Rules:
#   - case when 'cmd' is missed or undefined means 'no call is needed'
#   - the same if the whole spec for a hook is missed
#   - case when 'cmd' is udnefined for the main hook (stage) but specified
#     for pre or post is valid
#   - 'args' is optional
#   - 'when' is optional:
#      - if not specified then a hook (if it's considered for a flow)
#        would be called on 'node' level only
#      - if presented: should be checked as a boolean flag to call / not call the interface
#   - pre/post are optional keys of any hook (optional keys), values for them can be:
#     - string - which is equal to "cmd" (as a shortest form of a hook spec)
#     - dict - should have a usual hook spec format (cmd, args, when...) but pre/post are not expected there
#       if any key is omitted here main hook spec would be used as a source of defaults
#     - boolean :
#       - true: call the hook with the same spec as for main one
#       - false: do not call
#     - undefined (null): do not call

# post_install handler is called only for primary node
# consider config handler if some actions should be
# called on all nodes before server is run
s3:
  post_install:
    cmd: /opt/seagate/cortx/s3/bin/s3_setup post_install
    args: --config $URL
  init:
    cmd: /opt/seagate/cortx/s3/bin/s3_setup init
    args: --config $URL
  config:
    cmd: /opt/seagate/cortx/s3/bin/s3_setup config
    args: --config $URL
  test:
    cmd: /opt/seagate/cortx/s3/bin/s3_setup test
    args: --config $URL
  reset:
    cmd: /opt/seagate/cortx/s3/bin/s3_setup reset
    args: --config $URL
  prepare:
    cmd: /opt/seagate/cortx/s3/bin/s3_setup prepare
    args: --config $URL
  cleanup:
    cmd: /opt/seagate/cortx/s3/bin/s3_setup cleanup
    args: --config $URL
  backup:
    cmd: /opt/seagate/cortx/s3/bin/s3_setup backup
    args: --location $END-POINT
  restore:
    cmd: /opt/seagate/cortx/s3/bin/s3_setup restore
    args: --location $END-POINT
  upgrade:
    pre:
      cmd: /opt/seagate/cortx/s3/bin/s3_setup preupgrade
      when: {{ level == 'node' and flow == 'upgrade-offline' }}
    post:
      cmd: /opt/seagate/cortx/s3/bin/s3_setup postupgrade
      when: {{ level == 'node' and flow == 'upgrade-offline' }}

