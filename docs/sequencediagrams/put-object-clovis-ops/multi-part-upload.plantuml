@startuml

' Steps are listed here:
' https://docs.google.com/document/d/15YIzQUnz8MaACBdqKuZMbKSIDjSzBxb7OMhHqVAIgiI/edit#heading=h.dabn95db9jmm

header Multi-Part Upload\n By Ivan Tishchenko\n 2019-11-12
footer Page %page% of %lastpage%

title Multipart Upload

participant "S3 Client" as client
participant "S3 Server" as server
participant "Motr\nKVS API" as kvs
participant "Motr\nObject API" as object

autoactivate on



== Step 1: CreateMultipartUpload ==

client -> server: POST /bucket_name/object_name?uploads

server -> kvs: get_keyval(global_bucket_index, key = "bucket_name")
kvs --> server: value = account_id of bucket owner

server -> kvs: get_keyval(global_bucket_md_index, key = "account_id/bucket_name")
kvs --> server: value = bucket metadata JSON

server -> kvs: get_keyval(BUCKET_nnn_obj_index, key = "object_name")
note left
   * Index OID for this index is stored
      in bucket metadata JSON.
   * This call checks if object is present.
end note
kvs --> server: not found

server -> kvs: get_keyval(BUCKET_nnn_multipart_index, key = "object_name")
note left
   * Index OID for this index is stored
      in bucket metadata JSON.
   * This call checks if multipart upload for
      this object is in progress.
end note
kvs --> server: not found

server -> object: create_object
object --> server: success (completed)

server -> kvs: create index(object_nnn_part_index)
note right of server
  Index Name:
  BUCKET/<bucket name>/<object name>/<upload id>
  This index will hold metadata information about each
  part of the multipart upload as individual key-value pair.
end note
kvs --> server: success (completed)

server -> kvs: sync_index()
kvs --> server: success (completed)

server -> kvs: put_keyval(BUCKET_nnn_multipart_index, key=object_name, val = object_metadata)
kvs --> server: success (completed)

server -> kvs: sync_keyval()
kvs --> server: success (completed)

server --> client: 200 OK, multipart_upload_id


newpage
== Step 2: First "put part data" request ==

client -> server: PUT object with partNumber = 1\n uploadId = multipart_upload_id
note right: PUT /bucket_name/object_name?partNumber=1&uploadId=...guid

server -> kvs: get_keyval(global_bucket_index, key = "bucket_name")
kvs --> server: value = account_id of bucket owner

server -> kvs: get_keyval(global_bucket_md_index, key = "account_id/bucket_name")
kvs --> server: value = bucket metadata JSON

server -> kvs: get_keyval(BUCKET_nnn_multipart_index, key = "object_name")
kvs --> server: value = object multipart upload metadata JSON

server -> kvs: put_keyval(BUCKET_nnn_multipart_index, key = "object_name", value = "JSON")
note left: Updates the size of 1st part in metadata.
kvs --> server: success (completed)

server -> kvs: sync_keyval()
note left
  Needed to propagate the change across
  cluster.  Otherwise other nodes, receiving
  other parts, will fail.
end note
kvs --> server: success (completed)

server -> object: openobj
object --> server: success (completed)

loop until all data is written
  server -> object: Write data (up to 512 blocks per op, 16k each)
  note left
    Each write is 512 blocks, size
    of each block is 16k.  Except the
    last write, which has only remaining
    blocks (up to 512) and last block
    up to 16k.
  end note
  object --> server: success (completed)
end

server -> kvs: put_keyval(object_nnn_part_index, key = "1", value = "JSON")
note left: Saves metadata on part #1 of the upload.
kvs --> server: success (completed)

server -> kvs: sync_keyval()
note left
  Needed to propagate the change across the
  cluster.  Otherwise neighbour node, on receiving
  PostCompleteAction, will fail.
end note
kvs --> server: success (completed)

server --> client: 200 OK



newpage
== Step 3: Remaining "put part data" requests ==

loop for each remaining part

client -> server: PUT object with partNumber = NNN\n uploadId = multipart_upload_id
note right: PUT /bucket_name/object_name?partNumber=NNN&uploadId=...guid

server -> kvs: get_keyval(global_bucket_index, key = "bucket_name")
kvs --> server: value = account_id of bucket owner

server -> kvs: get_keyval(global_bucket_md_index, key = "account_id/bucket_name")
kvs --> server: value = bucket metadata JSON

server -> kvs: get_keyval(BUCKET_nnn_multipart_index, key = "object_name")
kvs --> server: value = object multipart upload metadata JSON

server -> object: openobj
object --> server: success (completed)

loop until all data is written
  server -> object: Write data (up to 512 blocks per op, 16k each)
  object --> server: success (completed)
end

server -> kvs: put_keyval(object_nnn_part_index, key = "part_number_NNN", value = "JSON")
note left: Saves metadata of the part #NNN of the upload.
kvs --> server: success (completed)

server -> kvs: sync_keyval()
note left
  Needed to propagate the change across the
  cluster.  Otherwise neighbour node, on receiving
  PostCompleteAction, will fail.
end note
kvs --> server: success (completed)

server --> client: 200 OK

end


newpage
== Step 4: PostCompleteAction ==

client -> server: POST /bucket_name/object_name\n&uploadId=multipart_upload_id

server -> kvs: get_keyval(global_bucket_index, key = "bucket_name")
kvs --> server: value = account_id of bucket owner

server -> kvs: get_keyval(global_bucket_md_index, key = "account_id/bucket_name")
kvs --> server: value = bucket metadata JSON

server -> kvs: get_keyval(BUCKET_nnn_obj_index, key = "object_name")
kvs --> server: value = object multipart upload metadata JSON

server -> kvs: get_next(object_nnn_part_index, key = "", count = 30)
note left: Loads part metadata to validate and compose\nfinal object metadata.
kvs --> server: value = up to 30 pairs of part_number/part_metadata_json

server -> kvs: put_keyval(BUCKET_nnn_obj_index, key = "object_name", value = "object metadata JSON")
note left: Saves metadata of the newly created object.
kvs --> server: success (completed)

server -> kvs: sync_keyval()
note left
  Needed to propagate the change across the
  cluster.  To allow instant GET on the object
  and avoid race conditions.
end note
kvs --> server: success (completed)

server -> kvs: delete_index(object_nnn_part_index)
note left: Clean up now unneeded multipart metadata.
kvs --> server: success (completed)

server -> kvs: sync_index
kvs --> server: success (completed)


server -> kvs: delete_keyval(BUCKET_nnn_multipart_index, key=object_name) 
kvs --> server: success (completed)

server -> kvs: sync_keyval
kvs --> server: success (completed)

@enduml
