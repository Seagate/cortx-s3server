@@ 
@@ Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
@@
@@ Licensed under the Apache License, Version 2.0 (the "License");
@@ you may not use this file except in compliance with the License.
@@ You may obtain a copy of the License at
@@ 
@@   http://www.apache.org/licenses/LICENSE-2.0
@@ 
@@ Unless required by applicable law or agreed to in writing, software
@@ distributed under the License is distributed on an "AS IS" BASIS,
@@ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ See the License for the specific language governing permissions and
@@ limitations under the License.
@@ 
@@ For any questions about this software or licensing,
@@ please email opensource@seagate.com or cortx-questions@seagate.com.
@@

diff --git a/Makefile.am b/Makefile.am
index 240d0146..d376ade3 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -231,6 +231,7 @@ CORE_SRC =					\
 	bufferevent_pair.c			\
 	bufferevent_ratelim.c			\
 	bufferevent_sock.c			\
+        ../../mempool/s3_memory_pool.c          \
 	event.c					\
 	evmap.c					\
 	evthread.c				\
@@ -256,7 +257,7 @@ MAYBE_CORE =
 endif
 
 AM_CFLAGS = $(LIBEVENT_CFLAGS)
-AM_CPPFLAGS = -I$(srcdir)/compat -I./include -I$(srcdir)/include $(SYS_INCLUDES) $(LIBEVENT_CPPFLAGS)
+AM_CPPFLAGS = -I$(srcdir)/compat -I./include -I$(srcdir)/include $(SYS_INCLUDES) -I../../mempool $(LIBEVENT_CPPFLAGS)
 AM_LDFLAGS = $(LIBEVENT_LDFLAGS)
 
 GENERIC_LDFLAGS = -version-info $(VERSION_INFO) $(RELEASE) $(NO_UNDEFINED) $(AM_LDFLAGS)
@@ -302,6 +303,7 @@ noinst_HEADERS +=				\
 	event-internal.h			\
 	evmap-internal.h			\
 	evrpc-internal.h			\
+        ../../mempool/s3_memory_pool.h          \
 	evsignal-internal.h			\
 	evthread-internal.h			\
 	ht-internal.h				\
diff --git a/buffer.c b/buffer.c
index 5e3d91b5..9a6957d9 100644
--- a/buffer.c
+++ b/buffer.c
@@ -140,6 +140,7 @@
 	(ptr)->internal_.pos_in_chain = 0;	\
 } while (0)
 
+extern int g_event_max_read;
 static void evbuffer_chain_align(struct evbuffer_chain *chain);
 static int evbuffer_chain_should_realign(struct evbuffer_chain *chain,
     size_t datalen);
@@ -158,12 +159,10 @@ evbuffer_chain_new(size_t size)
 {
 	struct evbuffer_chain *chain;
 	size_t to_alloc;
-
-	if (size > EVBUFFER_CHAIN_MAX - EVBUFFER_CHAIN_SIZE)
+	size_t pool_item_size = 0;
+	if (size > EVBUFFER_CHAIN_MAX)
 		return (NULL);
 
-	size += EVBUFFER_CHAIN_SIZE;
-
 	/* get the next largest memory that can hold the buffer */
 	if (size < EVBUFFER_CHAIN_MAX / 2) {
 		to_alloc = MIN_BUFFER_SIZE;
@@ -174,18 +173,32 @@ evbuffer_chain_new(size_t size)
 		to_alloc = size;
 	}
 
-	/* we get everything in one chunk */
-	if ((chain = mm_malloc(to_alloc)) == NULL)
+        /* Allocating the structure, buffer within this structure will be
+         * allocated separately */
+	if ((chain = mm_malloc(EVBUFFER_CHAIN_SIZE)) == NULL)
 		return (NULL);
 
-	memset(chain, 0, EVBUFFER_CHAIN_SIZE);
-
-	chain->buffer_len = to_alloc - EVBUFFER_CHAIN_SIZE;
+        mempool_getbuffer_size(g_pool_handle, &pool_item_size);
 
-	/* this way we can manipulate the buffer to different addresses,
-	 * which is required for mmap for example.
-	 */
-	chain->buffer = EVBUFFER_CHAIN_EXTRA(unsigned char, chain);
+	memset(chain, 0, EVBUFFER_CHAIN_SIZE);
+        if ((pool_item_size >= to_alloc) && (pool_item_size % to_alloc == 0)) {
+                if ((chain->buffer = (unsigned char *)mempool_getbuffer(
+                        g_pool_handle, pool_item_size)) == NULL) {
+                        mm_free(chain);
+                        return NULL;
+                }
+                chain->buffer_len = pool_item_size;
+                chain->chain_buffer_len = pool_item_size;
+        } else {
+                if ((chain->buffer = (unsigned char *)mm_malloc(to_alloc)) ==
+                    NULL) {
+                        mm_free(chain);
+                        return NULL;
+                }
+                chain->buffer_len = to_alloc;
+                chain->chain_buffer_len = to_alloc;
+        }
+        chain->chain_buffer = chain->buffer;
 
 	chain->refcnt = 1;
 
@@ -195,6 +208,7 @@ evbuffer_chain_new(size_t size)
 static inline void
 evbuffer_chain_free(struct evbuffer_chain *chain)
 {
+	size_t pool_item_size = 0;
 	EVUTIL_ASSERT(chain->refcnt > 0);
 	if (--chain->refcnt > 0) {
 		/* chain is still referenced by other chains */
@@ -249,6 +263,16 @@ evbuffer_chain_free(struct evbuffer_chain *chain)
 		evbuffer_decref_and_unlock_(info->source);
 	}
 
+	mempool_getbuffer_size(g_pool_handle, &pool_item_size);
+
+	if (chain->chain_buffer_len == pool_item_size) {
+		/* If the buffer size is same as that of pool's buffer size then
+		 * this have been allocated from pool, so release to pool */
+		mempool_releasebuffer(g_pool_handle, chain->chain_buffer,
+				      chain->chain_buffer_len);
+	} else {
+		mm_free(chain->chain_buffer);
+	}
 	mm_free(chain);
 }
 
@@ -690,8 +714,13 @@ evbuffer_reserve_space(struct evbuffer *buf, ev_ssize_t size,
 	} else {
 		if (evbuffer_expand_fast_(buf, size, n_vecs)<0)
 			goto done;
+                /* last argument set to 1, to allocate the 'size' space
+                 * in the vectors, even if more space is available.
+                 */
+                /* S3 edit starts */
 		n = evbuffer_read_setup_vecs_(buf, size, vec, n_vecs,
-				&chainp, 0);
+				&chainp, 1);
+                /* S3 edit ends */
 	}
 
 done:
@@ -2204,7 +2233,7 @@ evbuffer_expand(struct evbuffer *buf, size_t datlen)
 #endif
 #define NUM_READ_IOVEC 4
 
-#define EVBUFFER_MAX_READ	4096
+#define EVBUFFER_MAX_READ	16384
 
 /** Helper function to figure out which space to use for reading data into
     an evbuffer.  Internal use only.
@@ -2267,12 +2296,23 @@ get_n_bytes_readable_on_socket(evutil_socket_t fd)
 	/* Can overflow, but mostly harmlessly. XXXX */
 	return (int)lng;
 #elif defined(FIONREAD)
-	int n = EVBUFFER_MAX_READ;
+	int n;
+	if (g_event_max_read == 0)
+	{
+		n = EVBUFFER_MAX_READ;
+	} else {
+		n = g_event_max_read;
+	}
 	if (ioctl(fd, FIONREAD, &n) < 0)
 		return -1;
 	return n;
 #else
-	return EVBUFFER_MAX_READ;
+	if (g_event_max_read == 0)
+	{
+		return EVBUFFER_MAX_READ;
+	} else {
+		return g_event_max_read;
+	}
 #endif
 }
 
@@ -2300,11 +2340,14 @@ evbuffer_read(struct evbuffer *buf, evutil_socket_t fd, int howmuch)
 	}
 
 	n = get_n_bytes_readable_on_socket(fd);
-	if (n <= 0 || n > EVBUFFER_MAX_READ)
-		n = EVBUFFER_MAX_READ;
+	if (g_event_max_read == 0)
+		g_event_max_read = EVBUFFER_MAX_READ;
+
+	if (n <= 0 || n > g_event_max_read)
+		n = g_event_max_read;
+
 	if (howmuch < 0 || howmuch > n)
 		howmuch = n;
-
 #ifdef USE_IOVEC_IMPL
 	/* Since we can use iovecs, we're willing to use the last
 	 * NUM_READ_IOVEC chains. */
@@ -2941,6 +2984,7 @@ evbuffer_add_reference(struct evbuffer *outbuf,
 		/* don't call chain_free; we do not want to actually invoke
 		 * the cleanup function */
 		mm_free(chain);
+		mm_free(info);
 		goto done;
 	}
 	evbuffer_chain_insert(outbuf, chain);
diff --git a/bufferevent.c b/bufferevent.c
index 08c0486c..7b5643dd 100644
--- a/bufferevent.c
+++ b/bufferevent.c
@@ -587,9 +587,19 @@ bufferevent_disable(struct bufferevent *bufev, short event)
 }
 
 /*
- * Sets the water marks
+ * Set the maximum read
  */
+void
+bufferevent_set_read_data(struct bufferevent *bufev, size_t max_val)
+{
+	BEV_LOCK(bufev);
+	bufev->read_max_data = max_val;
+	BEV_UNLOCK(bufev);
+}
 
+/*
+ * Sets the water marks
+ */
 void
 bufferevent_setwatermark(struct bufferevent *bufev, short events,
     size_t lowmark, size_t highmark)
diff --git a/bufferevent_openssl.c b/bufferevent_openssl.c
index b51b834b..1b14e779 100644
--- a/bufferevent_openssl.c
+++ b/bufferevent_openssl.c
@@ -67,6 +67,8 @@
 #include <openssl/err.h>
 #include "openssl-compat.h"
 
+#define EVBUFFER_MAX_READ	16384
+
 /*
  * Define an OpenSSL bio that targets a bufferevent.
  */
@@ -105,6 +107,10 @@ print_err(int val)
 #define print_err(v) ((void)0)
 #endif
 
+/* S3 edit starts */
+extern size_t g_event_max_read;
+/* S3 edit ends */
+
 /* Called to initialize a new BIO */
 static int
 bio_bufferevent_new(BIO *b)
@@ -326,6 +332,9 @@ struct bufferevent_openssl {
 	unsigned state : 2;
 	/* If we reset fd, we sould reset state too */
 	unsigned old_state : 2;
+        /* S3 edit starts */
+        size_t read_max_data;
+        /* S3 edit ends */
 };
 
 static int be_openssl_enable(struct bufferevent *, short);
@@ -390,6 +399,43 @@ start_reading(struct bufferevent_openssl *bev_ssl)
 		struct bufferevent *bev = &bev_ssl->bev.bev;
 		int r;
 		r = bufferevent_add_event_(&bev->ev_read, &bev->timeout_read);
+                /* S3 edit starts */
+                /*
+                 * This is a fix for below scenario, Server would crash or return
+                 * timeout errors, when is tested with cosbench with SSL
+                 * enabled.  Specific scenario ivolved writing objects of size
+                 * 1000000 bytes.  Current settings force libevent to read data
+                 * in chunks of 16k, by setting low- and high-water marks to
+                 * 16k.  When reading in 16k chunks, the last chunk of data is
+                 * 576 bytes.  The issue that was observed was: libevent times
+                 * out on read, as if those 576 bytes were not sent by client.
+                 * When timeout has triggered, and S3 server has already sent
+                 * error response to client, right after that, libevent
+                 * suddenly discoveres that there's data for reading, and calls
+                 * consider_reading.  Crash was caused probably because
+                 * consider_reading calls htparser_run, and it uses parser
+                 * struct that has been already reset.
+                 *
+                 * The fix is -- if at the end of payload we see that there's
+                 * data pending, then immediately activate the event -- don't
+                 * wait until new data comes to socket.
+                 *
+                 * Since this is risky fix, condition for event activation is
+                 * specified as narrow as possible.  We check that watermark
+                 * (wm_read.low) is reduced -- this happens right after we read
+                 * last full chunk of 16k.  We check that pending data is more
+                 * or equal to watermark -- if it's less than watermark, it
+                 * means there's more data in socket, and we don't need to act.
+                 * We check that pending is more than 0 -- if it's 0, there
+                 * must be more data in socket.
+                 */
+                if (bev->wm_read.low < g_event_max_read &&
+                    SSL_pending(bev_ssl->ssl) >= bev->wm_read.low &&
+                    SSL_pending(bev_ssl->ssl) > 0) {
+                        evmap_io_active_(bev->ev_base, bev->ev_read.ev_fd,
+                                        EV_READ | EV_ET);
+                }
+                /* S3 edit ends */
 		if (r == 0 && bev_ssl->read_blocked_on_write)
 			r = bufferevent_add_event_(&bev->ev_write,
 			    &bev->timeout_write);
@@ -767,6 +813,16 @@ bytes_to_read(struct bufferevent_openssl *bev)
 		result = READ_DEFAULT;
 	}
 
+	/* read only 'read_max_data' bytes, when `read_max_data'
+	 * value is '0'. read_max_data will set only for the first time
+	 * and is to read the bytes which is equal to header size.
+	 */
+	/* S3 edit starts */
+	if (bev->read_max_data != 0) {
+		result = bev->read_max_data;
+	}
+	/* S3 edit ends */
+
 	/* Respect the rate limit */
 	limit = bufferevent_get_read_max_(&bev->bev);
 	if (result > limit) {
@@ -797,6 +853,10 @@ consider_reading(struct bufferevent_openssl *bev_ssl)
 		return;
 
 	n_to_read = bytes_to_read(bev_ssl);
+	// reset to '0'
+	/* S3 edit starts */
+	bev_ssl->read_max_data = 0;
+	/* S3 edit ends */
 
 	while (n_to_read) {
 		r = do_read(bev_ssl, n_to_read);
@@ -818,6 +878,19 @@ consider_reading(struct bufferevent_openssl *bev_ssl)
 		 * whole SSL record anyway. */
 		n_to_read = SSL_pending(bev_ssl->ssl);
 
+		/* S3 edit starts */
+		/* Read only the number of bytes required to make evbuffer
+		 * size alignment with 16k, instead of reading all
+		 * available bytes retunred by SSL_pending call.
+		 */
+		if (n_to_read > 0) {
+			struct bufferevent *bev = &bev_ssl->bev.bev;
+			struct evbuffer *input = bev->input;
+			int bytes_pending_to_read = EVBUFFER_MAX_READ - evbuffer_get_length(input);
+			n_to_read = bytes_pending_to_read > 0 ? bytes_pending_to_read : 0;
+		}
+		/* S3 edit ends */
+
 		/* XXX This if statement is actually a bad bug, added to avoid
 		 * XXX a worse bug.
 		 *
@@ -1522,3 +1595,14 @@ bufferevent_get_openssl_error(struct bufferevent *bev)
 	BEV_UNLOCK(bev);
 	return err;
 }
+
+/* S3 edit starts */
+void bufferevent_ssl_set_read_data(struct bufferevent *bev, size_t max_val)
+{
+    struct bufferevent_openssl *bev_ssl;
+    BEV_LOCK(bev);
+    bev_ssl = upcast(bev);
+    bev_ssl->read_max_data = max_val;
+    BEV_UNLOCK(bev);
+}
+/* S3 edit ends */
diff --git a/bufferevent_sock.c b/bufferevent_sock.c
index f275b023..9db766fc 100644
--- a/bufferevent_sock.c
+++ b/bufferevent_sock.c
@@ -179,6 +179,10 @@ bufferevent_readcb(evutil_socket_t fd, short event, void *arg)
 			goto done;
 		}
 	}
+
+        if (bufev->read_max_data != 0) {
+                howmuch = bufev->read_max_data;
+        }
 	readmax = bufferevent_get_read_max_(bufev_p);
 	if (howmuch < 0 || howmuch > readmax) /* The use of -1 for "unlimited"
 					       * uglifies this code. XXXX */
@@ -208,6 +212,8 @@ bufferevent_readcb(evutil_socket_t fd, short event, void *arg)
 	if (res <= 0)
 		goto error;
 
+        bufev->read_max_data = 0;
+
 	bufferevent_decrement_read_buckets_(bufev_p, res);
 
 	/* Invoke the user callback - must always be called last */
diff --git a/epoll.c b/epoll.c
index a0df0d21..27313294 100644
--- a/epoll.c
+++ b/epoll.c
@@ -126,7 +126,7 @@ const struct eventop epollops = {
 	0
 };
 
-#define INITIAL_NEVENT 32
+#define INITIAL_NEVENT 128
 #define MAX_NEVENT 4096
 
 /* On Linux kernels at least up to 2.6.24.4, epoll can't handle timeout
diff --git a/evbuffer-internal.h b/evbuffer-internal.h
index d09b4f1d..44fe4e5b 100644
--- a/evbuffer-internal.h
+++ b/evbuffer-internal.h
@@ -54,7 +54,7 @@ extern "C" {
 #if EVENT__SIZEOF_VOID_P < 8
 #define MIN_BUFFER_SIZE	512
 #else
-#define MIN_BUFFER_SIZE	1024
+#define MIN_BUFFER_SIZE	4096
 #endif
 
 /** A single evbuffer callback for an evbuffer. This function will be invoked
@@ -175,6 +175,9 @@ struct evbuffer_chain {
 	/** total allocation available in the buffer field. */
 	size_t buffer_len;
 
+	/** Total allocation created initially */
+	size_t chain_buffer_len;
+
 	/** unused space at the beginning of buffer or an offset into a
 	 * file for sendfile buffers. */
 	ev_misalign_t misalign;
@@ -211,6 +214,9 @@ struct evbuffer_chain {
 	 * may point to NULL.
 	 */
 	unsigned char *buffer;
+	/* Will hold the initial address of buffer, will be used to free the
+	 * same */
+	unsigned char *chain_buffer;
 };
 
 /** callback for a reference chain; lets us know what to do with it when
@@ -276,7 +282,8 @@ struct evbuffer_multicast_parent {
 
 #define EVBUFFER_CHAIN_SIZE sizeof(struct evbuffer_chain)
 /** Return a pointer to extra data allocated along with an evbuffer. */
-#define EVBUFFER_CHAIN_EXTRA(t, c) (t *)((struct evbuffer_chain *)(c) + 1)
+#define EVBUFFER_CHAIN_EXTRA(t, c)                                             \
+	(t *)(((struct evbuffer_chain *)(c))->chain_buffer)
 
 /** Assert that we are holding the lock on an evbuffer */
 #define ASSERT_EVBUFFER_LOCKED(buffer)			\
diff --git a/event.c b/event.c
index a778f96c..b6683646 100644
--- a/event.c
+++ b/event.c
@@ -26,7 +26,7 @@
  */
 #include "event2/event-config.h"
 #include "evconfig-private.h"
-
+#include "s3_memory_pool.h"
 #ifdef _WIN32
 #include <winsock2.h>
 #define WIN32_LEAN_AND_MEAN
@@ -134,6 +134,10 @@ struct event_base *event_global_current_base_ = NULL;
 
 static void *event_self_cbarg_ptr_ = NULL;
 
+/* global Memory Pool handle */
+MemoryPoolHandle g_pool_handle;
+/* global max allowed read */
+size_t g_event_max_read;
 /* Prototypes */
 static void	event_queue_insert_active(struct event_base *, struct event_callback *);
 static void	event_queue_insert_active_later(struct event_base *, struct event_callback *);
@@ -2063,7 +2067,7 @@ event_base_once(struct event_base *base, evutil_socket_t fd, short events,
 		return (-1);
 
 	if ((eonce = mm_calloc(1, sizeof(struct event_once))) == NULL)
-		return (-1);
+	  return (-1);
 
 	eonce->cb = callback;
 	eonce->arg = arg;
@@ -2763,6 +2767,38 @@ event_add_nolock_(struct event *ev, const struct timeval *tv,
 	return (res);
 }
 
+int
+event_use_mempool(size_t item_size, size_t pool_initial_size,
+                     size_t pool_expansion_size,
+                     size_t pool_max_threshold_size,
+                     int flags)
+{
+        int rc;
+        rc = mempool_create(item_size, pool_initial_size, pool_expansion_size,
+                        pool_max_threshold_size, (func_log_callback_type)NULL, flags, &g_pool_handle);
+        if (rc != 0)
+                return rc;
+
+        return 0;
+}
+
+int event_mempool_free_space(size_t *free_space) {
+        return mempool_available_space(g_pool_handle, free_space);
+}
+
+int event_mempool_getinfo(struct pool_info* poolinfo) {
+        return mempool_getinfo(g_pool_handle, poolinfo);
+}
+
+int event_destroy_mempool(void) {
+        return mempool_destroy(&g_pool_handle);
+}
+
+void event_set_max_read(size_t max_read)
+{
+        g_event_max_read = max_read;
+}
+
 static int
 event_del_(struct event *ev, int blocking)
 {
diff --git a/include/event2/buffer.h b/include/event2/buffer.h
index 468588b9..8a048e92 100644
--- a/include/event2/buffer.h
+++ b/include/event2/buffer.h
@@ -1052,6 +1052,10 @@ struct event_base;
  */
 EVENT2_EXPORT_SYMBOL
 int evbuffer_defer_callbacks(struct evbuffer *buffer, struct event_base *base);
+/**
+  Set the maximum allowed read
+*/
+void evbuffer_set_max_read(size_t max_read);
 
 /**
   Append data from 1 or more iovec's to an evbuffer
diff --git a/include/event2/bufferevent.h b/include/event2/bufferevent.h
index dac34dc7..bc5ef66d 100644
--- a/include/event2/bufferevent.h
+++ b/include/event2/bufferevent.h
@@ -512,6 +512,18 @@ EVENT2_EXPORT_SYMBOL
 int bufferevent_set_timeouts(struct bufferevent *bufev,
     const struct timeval *timeout_read, const struct timeval *timeout_write);
 
+/**
+  Gets the low water mark for the buffer set during memory pool creation.
+*/
+EVENT2_EXPORT_SYMBOL
+size_t  bufferevent_get_s3_low_watermark(void);
+
+/**
+  Sets the data length to be read from socket
+*/
+EVENT2_EXPORT_SYMBOL
+void bufferevent_set_read_data(struct bufferevent *bufev, size_t max_val);
+
 /**
   Sets the watermarks for read and write events.
 
diff --git a/include/event2/bufferevent_ssl.h b/include/event2/bufferevent_ssl.h
index bf39b844..4bffe01d 100644
--- a/include/event2/bufferevent_ssl.h
+++ b/include/event2/bufferevent_ssl.h
@@ -125,6 +125,11 @@ int bufferevent_ssl_renegotiate(struct bufferevent *bev);
 EVENT2_EXPORT_SYMBOL
 unsigned long bufferevent_get_openssl_error(struct bufferevent *bev);
 
+/* S3 edit starts */
+void bufferevent_ssl_set_read_data(struct bufferevent *bev, size_t max_val);
+/* S3 edit ends */
+
+
 #endif
 
 #ifdef __cplusplus
diff --git a/include/event2/bufferevent_struct.h b/include/event2/bufferevent_struct.h
index e84c082c..1848430c 100644
--- a/include/event2/bufferevent_struct.h
+++ b/include/event2/bufferevent_struct.h
@@ -107,6 +107,7 @@ struct bufferevent {
 	/** Events that are currently enabled: currently EV_READ and EV_WRITE
 	    are supported. */
 	short enabled;
+	size_t read_max_data;
 };
 
 #ifdef __cplusplus
diff --git a/include/event2/event.h b/include/event2/event.h
index ff208517..54854b00 100644
--- a/include/event2/event.h
+++ b/include/event2/event.h
@@ -298,6 +298,51 @@ struct event_config
 #endif
 ;
 
+/**
+ * Enable use of memory pool for libevent.
+ * Memory pool is created with some pre allocated buffers of fixed size.
+ * Memory will be allocated/released from/to the buffer pool for the libevent
+ * buffers.
+ *
+ * @param item_size the buffer size in the pool
+ * @param pool_initial_size the pool's initial preallocated memory
+ * @param pool_expansion_size the pool's memory expansion size
+ * @param pool_max_threshold_size Maximum outstanding memory that can be alloted
+ * from pool
+ * @flags CREATE_ALIGNED_MEMORY, ENABLE_LOCKING
+ * @return 0 if successful otherwise an error
+ */
+EVENT2_EXPORT_SYMBOL
+int event_use_mempool(size_t item_size, size_t pool_initial_size,
+			size_t pool_expansion_size,
+			size_t pool_max_threshold_size, int flags);
+
+/**
+ * Free space in the memory pool
+ */
+EVENT2_EXPORT_SYMBOL
+int event_mempool_free_space(size_t *free_space);
+
+/**
+ * Get pool information
+ */
+EVENT2_EXPORT_SYMBOL
+int event_mempool_getinfo(struct pool_info *poolinfo);
+
+/**
+ * Destroy the memory pool
+ */
+EVENT2_EXPORT_SYMBOL
+int event_destroy_mempool(void);
+
+/**
+ * Set maximum read possible.
+ *
+ * @param max_read maximum read possible
+ */
+EVENT2_EXPORT_SYMBOL
+void event_set_max_read(size_t max_read);
+
 /**
  * Enable some relatively expensive debugging checks in Libevent that
  * would normally be turned off.  Generally, these checks cause code that
diff --git a/mm-internal.h b/mm-internal.h
index 7a95c995..d9c971ff 100644
--- a/mm-internal.h
+++ b/mm-internal.h
@@ -27,6 +27,7 @@
 #define MM_INTERNAL_H_INCLUDED_
 
 #include <sys/types.h>
+#include "s3_memory_pool.h"
 
 #ifdef __cplusplus
 extern "C" {
@@ -85,6 +86,8 @@ void event_mm_free_(void *p);
 #define mm_free(p) free(p)
 #endif
 
+/* Memory Pool handle declaration */
+extern MemoryPoolHandle g_pool_handle;
 #ifdef __cplusplus
 }
 #endif
