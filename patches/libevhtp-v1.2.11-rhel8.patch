@@ 
@@ Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
@@
@@ Licensed under the Apache License, Version 2.0 (the "License");
@@ you may not use this file except in compliance with the License.
@@ You may obtain a copy of the License at
@@ 
@@   http://www.apache.org/licenses/LICENSE-2.0
@@ 
@@ Unless required by applicable law or agreed to in writing, software
@@ distributed under the License is distributed on an "AS IS" BASIS,
@@ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ See the License for the specific language governing permissions and
@@ limitations under the License.
@@ 
@@ For any questions about this software or licensing,
@@ please email opensource@seagate.com or cortx-questions@seagate.com.
@@

diff --git a/evhtp.c b/evhtp.c
index 6ff6b90..1905089 100644
--- a/evhtp.c
+++ b/evhtp.c
@@ -70,6 +70,7 @@ static evhtp_path_t       * _evhtp_path_new(const char * data, size_t len);
 static void                 _evhtp_path_free(evhtp_path_t * path);
 
 static void                 _evhtp_request_free(evhtp_request_t *);
+size_t g_buffer_size;  /* S3 edit */
 
 #define HOOK_AVAIL(var, hook_name)                 (var->hooks && var->hooks->hook_name)
 #define HOOK_FUNC(var, hook_name)                  (var->hooks->hook_name)
@@ -1426,6 +1427,15 @@ _evhtp_request_parser_headers(htparser * p) {
     c->request->proto     = _evhtp_protocol(htparser_get_major(p), htparser_get_minor(p));
     c->request->status    = _evhtp_headers_hook(c->request, c->request->headers_in);
 
+    /* S3 edit starts */
+    // In case of ssl request _evhtp_headers_hook calls _evhtp_connection_writecb
+    // Which frees request, hence the dereferencing c->request->status crashes
+    // If request is NULL then return.
+    if (c->request == NULL) {
+      return 0;
+    }
+    /* S3 edit ends */
+
     if (c->request->status != EVHTP_RES_OK) {
         return -1;
     }
@@ -1795,7 +1805,6 @@ _evhtp_connection_readcb(evbev_t * bev, void * arg) {
     if (c->paused == 1) {
         return;
     }
-
     buf   = evbuffer_pullup(bufferevent_get_input(bev), avail);
 
     htp_log_debug("buffer is\n----\n%.*s\n-----", (int)avail, (const char *)buf);
@@ -1829,10 +1838,55 @@ _evhtp_connection_readcb(evbev_t * bev, void * arg) {
 
     evbuffer_drain(bufferevent_get_input(bev), nread);
 
+    /* S3 edit starts */
+    if (htparser_body_was_deferred(c->parser)
+      && ((avail - nread) == htparser_get_content_pending(c->parser))) {
+        // We have all the data, align the buffer and complete parsing
+        buf   = evbuffer_pullup(bufferevent_get_input(bev), avail - nread);
+        nread = htparser_run(c->parser, &request_psets,
+                             (const char *)buf, avail - nread);
+        evbuffer_drain(bufferevent_get_input(bev), nread);
+        htp_log_debug("nread after parser rerun = %zu", nread);
+    }
+    if (htparser_get_content_pending(c->parser) < g_buffer_size) {
+      /* If data remaining is less than the buffer size then set low water mark
+         to that value, mostly last part of body */
+      bufferevent_setwatermark(bev, EV_READ,
+                               htparser_get_content_pending(c->parser),
+                               g_buffer_size);
+      htp_log_debug("Reset lowwatermark(%zu) and highwatermark(%zu).\n",
+                     htparser_get_content_pending(c->parser), g_buffer_size);
+    }
+    /* S3 edit ends */
+
     if (c->request && c->request->status == EVHTP_RES_PAUSE) {
         evhtp_request_pause(c->request);
     } else if (htparser_get_error(c->parser) != htparse_error_none) {
         evhtp_connection_free(c);
+    } else if (htparser_body_was_deferred(c->parser)) {
+      /* S3 edit starts */
+      /* This is to ensure that we have maximum data in buffer */
+      /* Next bufferevent read will try to read nread more data to buffer
+      */
+      htp_log_debug("Ask for more nread(%zu) data (= header size).\n", nread);
+      if (c->ssl != NULL) {
+        bufferevent_ssl_set_read_data(bev, nread);
+      } else {
+        bufferevent_set_read_data(bev, nread);
+      }
+
+      if (htparser_get_content_pending(c->parser) >= g_buffer_size) {
+        htp_log_debug("Set lowwatermark(%zu) and highwatermark(%zu).\n",
+                      g_buffer_size, g_buffer_size);
+        bufferevent_setwatermark(bev, EV_READ, g_buffer_size, g_buffer_size);
+      } else {
+        htp_log_debug("Set lowwatermark(%zu) and highwatermark(%zu).\n",
+                      htparser_get_content_pending(c->parser), g_buffer_size);
+        bufferevent_setwatermark(bev, EV_READ,
+                                 htparser_get_content_pending(c->parser),
+                                 g_buffer_size);
+      }
+      /* S3 edit ends */
     } else if (nread < avail) {
         /* we still have more data to read (piped request probably) */
         evhtp_connection_resume(c);
@@ -2242,9 +2296,13 @@ _evhtp_ssl_delete_scache_ent(evhtp_ssl_ctx_t * ctx, evhtp_ssl_sess_t * sess) {
 
     htp  = (evhtp_t *)SSL_CTX_get_app_data(ctx);
     cfg  = htp->ssl_cfg;
-
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
     sid  = sess->session_id;
+    sid = (unsigned char   *)SSL_SESSION_get_id(sess, &slen);
     slen = sess->session_id_length;
+#else
+    sid = (unsigned char   *)SSL_SESSION_get_id(sess, &slen);
+#endif
 
     if (cfg->scache_del) {
         (cfg->scache_del)(htp, sid, slen);
@@ -2256,13 +2314,17 @@ _evhtp_ssl_add_scache_ent(evhtp_ssl_t * ssl, evhtp_ssl_sess_t * sess) {
     evhtp_connection_t * connection;
     evhtp_ssl_cfg_t    * cfg;
     unsigned char      * sid;
-    int                  slen;
+    unsigned int         slen;
 
     connection = (evhtp_connection_t *)SSL_get_app_data(ssl);
     cfg        = connection->htp->ssl_cfg;
 
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
     sid        = sess->session_id;
     slen       = sess->session_id_length;
+#else
+    sid = (unsigned char      *)SSL_SESSION_get_id(sess, &slen);
+#endif
 
     SSL_set_timeout(sess, cfg->scache_timeout);
 
@@ -2312,16 +2374,28 @@ _evhtp_ssl_servername(evhtp_ssl_t * ssl, int * unused, void * arg) {
     }
 
     if ((evhtp_vhost = _evhtp_request_find_vhost(evhtp, sname))) {
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+        SSL_CTX * ctx = SSL_get_SSL_CTX(ssl);
+#endif
         connection->htp           = evhtp_vhost;
         connection->vhost_via_sni = 1;
 
         SSL_set_SSL_CTX(ssl, evhtp_vhost->ssl_ctx);
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         SSL_set_options(ssl, SSL_CTX_get_options(ssl->ctx));
+#endif
+        SSL_set_options(ssl, SSL_CTX_get_options(ctx));
+#endif
 
         if ((SSL_get_verify_mode(ssl) == SSL_VERIFY_NONE) ||
             (SSL_num_renegotiations(ssl) == 0)) {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
             SSL_set_verify(ssl, SSL_CTX_get_verify_mode(ssl->ctx),
                            SSL_CTX_get_verify_callback(ssl->ctx));
+#else
+            SSL_set_verify(ssl, SSL_CTX_get_verify_mode(ctx),
+                           SSL_CTX_get_verify_callback(ctx));
+#endif
         }
 
         return SSL_TLSEXT_ERR_OK;
@@ -2330,7 +2404,6 @@ _evhtp_ssl_servername(evhtp_ssl_t * ssl, int * unused, void * arg) {
     return SSL_TLSEXT_ERR_NOACK;
 } /* _evhtp_ssl_servername */
 
-#endif
 
 /*
  * PUBLIC FUNCTIONS
@@ -3194,6 +3267,11 @@ evhtp_bind_sockaddr(evhtp_t * htp, struct sockaddr * sa, size_t sin_len, int bac
 
     setsockopt(fd, SOL_SOCKET, SO_KEEPALIVE, (void *)&on, sizeof(on));
     setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, (void *)&on, sizeof(on));
+#if defined SO_REUSEPORT
+    if (htp->enable_reuseport) {
+        setsockopt(fd, SOL_SOCKET, SO_REUSEPORT, (void *)&on, sizeof(on));
+    }
+#endif
 
     if (sa->sa_family == AF_INET6) {
         int rc;
@@ -3837,7 +3915,11 @@ evhtp_ssl_init(evhtp_t * htp, evhtp_ssl_cfg_t * cfg) {
     SSL_CTX_set_verify(htp->ssl_ctx, cfg->verify_peer, cfg->x509_verify_cb);
 
     if (cfg->x509_chk_issued_cb != NULL) {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         htp->ssl_ctx->cert_store->check_issued = cfg->x509_chk_issued_cb;
+#else
+        X509_STORE_set_check_issued(SSL_CTX_get_cert_store(htp->ssl_ctx), cfg->x509_chk_issued_cb);
+#endif
     }
 
     if (cfg->verify_depth) {
@@ -4212,12 +4294,6 @@ evhtp_free(evhtp_t * evhtp) {
         evhtp_safe_free(evhtp_alias, free);
     }
 
-#ifndef EVHTP_DISABLE_SSL
-    if (evhtp->ssl_ctx) {
-        SSL_CTX_free(evhtp->ssl_ctx);
-    }
-#endif
-
     evhtp_safe_free(evhtp, free);
 } /* evhtp_free */
 
@@ -4264,6 +4340,16 @@ evhtp_connection_new_dns(evbase_t * evbase, struct evdns_base * dns_base,
         struct sockaddr   * sin;
         int                 salen;
 
+        /* S3 edit starts */
+        /* ip address will be prefixed with ipv4: or ipv6:
+         * trim the prefix string.
+         * Eg: ipv4:127.0.0.1 or ipv6:::1
+         */
+        if ((!strncmp(addr, "ipv4:", 5)) || !strncmp(addr, "ipv6:", 5)) {
+            addr           += 5;
+        }
+        /* S3 edit ends */
+
         if (inet_pton(AF_INET, addr, &sin4.sin_addr)) {
             sin4.sin_family = AF_INET;
             sin4.sin_port   = htons(port);
@@ -4299,6 +4385,9 @@ evhtp_connection_t *
 evhtp_connection_ssl_new(evbase_t * evbase, const char * addr, uint16_t port, evhtp_ssl_ctx_t * ctx) {
     evhtp_connection_t * conn;
     struct sockaddr_in   sin;
+    struct sockaddr_in6 sin6;
+    struct sockaddr   * sa;
+    size_t              sin_len;
 
     evhtp_assert(evbase != NULL);
 
@@ -4306,9 +4395,29 @@ evhtp_connection_ssl_new(evbase_t * evbase, const char * addr, uint16_t port, ev
         return NULL;
     }
 
-    sin.sin_family      = AF_INET;
-    sin.sin_addr.s_addr = inet_addr(addr);
-    sin.sin_port        = htons(port);
+    if (!strncmp(addr, "ipv6:", 5)) {
+        memset(&sin6, 0, sizeof(sin6));
+
+        addr           += 5;
+        sin_len          = sizeof(struct sockaddr_in6);
+        sin6.sin6_family = AF_INET6;
+        sin6.sin6_port   = htons(port);
+
+        evutil_inet_pton(AF_INET6, addr, &sin6.sin6_addr);
+        sa = (struct sockaddr *)&sin6;
+    } else {
+        if (!strncmp(addr, "ipv4:", 5)) {
+            addr += 5;
+        }
+
+        sin_len             = sizeof(struct sockaddr_in);
+
+        sin.sin_family      = AF_INET;
+        sin.sin_port        = htons(port);
+        sin.sin_addr.s_addr = inet_addr(addr);
+
+        sa = (struct sockaddr *)&sin;
+    }
 
     conn->ssl           = SSL_new(ctx);
     conn->evbase        = evbase;
@@ -4319,9 +4428,7 @@ evhtp_connection_ssl_new(evbase_t * evbase, const char * addr, uint16_t port, ev
     bufferevent_setcb(conn->bev, NULL, NULL,
                       _evhtp_connection_eventcb, conn);
 
-    bufferevent_socket_connect(conn->bev,
-                               (struct sockaddr *)&sin, sizeof(sin));
-
+    bufferevent_socket_connect(conn->bev, sa, sin_len);
 
     return conn;
 }
@@ -4378,4 +4485,11 @@ evhtp_make_request(evhtp_connection_t * c, evhtp_request_t * r,
 unsigned int
 evhtp_request_status(evhtp_request_t * r) {
     return htparser_get_status(r->conn->parser);
-}
\ No newline at end of file
+}
+
+/* S3 edit starts */
+void
+evhtp_set_low_watermark(size_t buffer_size) {
+    g_buffer_size = buffer_size;
+}
+/* S3 edit starts */
diff --git a/evhtp.h b/evhtp.h
index 1f0cdaa..a5b661b 100644
--- a/evhtp.h
+++ b/evhtp.h
@@ -30,7 +30,6 @@
 #ifdef __cplusplus
 extern "C" {
 #endif
-
 #ifdef EVHTP_DEBUG
 #define __QUOTE(x)              # x
 #define  _QUOTE(x)              __QUOTE(x)
@@ -1352,6 +1351,13 @@ EVHTP_EXPORT int evhtp_make_request(evhtp_connection_t * c,
 
 EVHTP_EXPORT unsigned int evhtp_request_status(evhtp_request_t *);
 
+/* S3 edit starts */
+/**
+ * @brief set low water mark
+ */
+EVHTP_EXPORT void evhtp_set_low_watermark(size_t buffer_size);
+/* S3 edit ends */
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/htparse.c b/htparse.c
index d4bcf3e..6460b7d 100644
--- a/htparse.c
+++ b/htparse.c
@@ -10,7 +10,9 @@
 
 #include "htparse.h"
 #include "evhtp-internal.h"
+#include <event2/bufferevent.h>
 
+// #define PARSER_DEBUG
 #ifdef PARSER_DEBUG
 #define __QUOTE(x)                  # x
 #define  _QUOTE(x)                  __QUOTE(x)
@@ -39,6 +41,10 @@
 #define CR               (unsigned char)13
 #define CRLF             "\x0d\x0a"
 
+/* S3 edit starts */
+extern size_t g_buffer_size;
+/* S3 edit ends */
+
 enum eval_hdr_val {
     eval_hdr_val_none = 0,
     eval_hdr_val_connection,
@@ -54,6 +60,7 @@ enum parser_flags {
     parser_flag_connection_keep_alive = (1 << 1),
     parser_flag_connection_close      = (1 << 2),
     parser_flag_trailing              = (1 << 3),
+    parser_defer_body                  = (1<< 4), /* S3 edit */
 };
 
 enum parser_state {
@@ -385,6 +392,13 @@ htparser_get_status(htparser * p) {
     return p->status;
 }
 
+/* S3 edit starts */
+unsigned int
+htparser_body_was_deferred(htparser * p) {
+   return p->flags & parser_defer_body;
+}
+/* S3 edit ends */
+
 int
 htparser_should_keep_alive(htparser * p) {
     if (p->major > 0 && p->minor > 0) {
@@ -1832,6 +1846,14 @@ hdrline_start:
                             p->state = s_chunk_size_start;
                         } else if (p->content_len > 0) {
                             p->state = s_body_read;
+                            /* S3 edit starts */
+                            if (p->method == htp_method_PUT) {
+                               /* preempt reading data, this is force
+                               data buffer alignment for caller of htparser_run */
+                               p->flags  |= parser_defer_body;
+                               return i + 1;
+                            }
+                            /* S3 edit ends */
                         } else if (p->content_len == 0) {
                             res      = hook_on_msg_complete_run(p, hooks);
                             p->state = s_start;
@@ -1870,6 +1892,12 @@ hdrline_start:
                 } else if (p->content_len > 0) {
                     p->state = s_body_read;
                     i--;
+                    /* S3 edit starts */
+                    if (p->method == htp_method_PUT) {
+                       p->flags  |= parser_defer_body;
+                       return i;
+                    }
+                    /* S3 edit ends */
                 } else if (p->content_len == 0) {
                     res      = hook_on_msg_complete_run(p, hooks);
                     p->state = s_start;
@@ -1992,6 +2020,10 @@ hdrline_start:
                 res = 0;
 
                 {
+                    /* S3 edit starts */
+                    p->flags &= ~parser_defer_body;
+                    /* S3 edit ends */
+
                     const char * pp      = &data[i];
                     const char * pe      = (const char *)(data + len);
                     size_t       to_read = _MIN_READ(pe - pp, p->content_len);
@@ -2032,4 +2064,3 @@ hdrline_start:
 
     return i;
 }         /* htparser_run */
-
diff --git a/htparse.h b/htparse.h
index da2fd53..f869805 100644
--- a/htparse.h
+++ b/htparse.h
@@ -106,6 +106,9 @@ EVHTP_EXPORT unsigned char  htparser_get_major(htparser *);
 EVHTP_EXPORT unsigned char  htparser_get_minor(htparser *);
 EVHTP_EXPORT unsigned char  htparser_get_multipart(htparser *);
 EVHTP_EXPORT unsigned int   htparser_get_status(htparser *);
+/* S3 edit starts */
+EVHTP_EXPORT unsigned int   htparser_body_was_deferred(htparser *);
+/* S3 edit ends */
 EVHTP_EXPORT uint64_t       htparser_get_content_length(htparser *);
 EVHTP_EXPORT uint64_t       htparser_get_content_pending(htparser *);
 EVHTP_EXPORT uint64_t       htparser_get_total_bytes_read(htparser *);
@@ -121,4 +124,3 @@ EVHTP_EXPORT htparser     * htparser_new(void);
 #endif
 
 #endif
-
